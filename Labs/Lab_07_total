using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Classes
{
    class Program
    {
        static void doWork()
        {
           Point origin = new Point(); // point is the type, origin is the name/variable = is the assignment operator and new goes to the heap
            //and allocates sufficent amount of memory to hold and object of that type and returns it to the stack
            // origin contains the memory address which points to a space in the heap
            // Point(); is a constructor
            Point bottomRight = new Point(1366, 768);
            double distance = origin.DistanceTo(bottomRight);
            Console.WriteLine($"Distance is: {distance}");
            Point maxwell = new Point(1, 1);
            Point christy = new Point(4, 5);
            distance = maxwell.DistanceTo(christy); // preiod(.) access operator gives you access to the fields in a method.
            Console.WriteLine($"Distance is: {distance}");
            Console.WriteLine($"Number of Point objects: {Point.ObjectCount()}");
        // contains a memory address
    }

        static void Main(string[] args)
        {
            try
            {
                doWork();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
    }
}


using System;

namespace Classes
{
    class Point
    {
        private int _x = 0; // this is an instance field which means every object you create has its own copy of x
        private int _y = 0; //cannot use initialized variables : definite assignment rule
        private static int objectCount = 0;
        public Point()
        {
            Console.WriteLine("Default constructor called");
        }
        public Point(int x, int y)
        {
            Console.WriteLine($"x:{x}, y:{y}");
            _x = x; // 'this' keyword is an alias for an instance
            _y = y;
        }
        public double DistanceTo(Point other)
        {
            int xDiff = this._x - other._x; // the period(.) is the access modifier
            int yDiff = this._y - other._y;
            double distance = Math.Sqrt((xDiff * xDiff) + (yDiff * yDiff));
            return distance;
        }
        public static int ObjectCount() //what does static do? declares a class method. A class method is shared. objectcount() is  amethod  // int is the return type
        {
            return objectCount;
        }
    }

}
